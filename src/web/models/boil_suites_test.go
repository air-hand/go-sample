// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Groups", testGroups)
	t.Run("TestTables", testTestTables)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Groups", testGroupsDelete)
	t.Run("TestTables", testTestTablesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Groups", testGroupsQueryDeleteAll)
	t.Run("TestTables", testTestTablesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Groups", testGroupsSliceDeleteAll)
	t.Run("TestTables", testTestTablesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Groups", testGroupsExists)
	t.Run("TestTables", testTestTablesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Groups", testGroupsFind)
	t.Run("TestTables", testTestTablesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Groups", testGroupsBind)
	t.Run("TestTables", testTestTablesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Groups", testGroupsOne)
	t.Run("TestTables", testTestTablesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Groups", testGroupsAll)
	t.Run("TestTables", testTestTablesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Groups", testGroupsCount)
	t.Run("TestTables", testTestTablesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Groups", testGroupsHooks)
	t.Run("TestTables", testTestTablesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Groups", testGroupsInsert)
	t.Run("Groups", testGroupsInsertWhitelist)
	t.Run("TestTables", testTestTablesInsert)
	t.Run("TestTables", testTestTablesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("GroupToUsers", testGroupToManyUsers)
	t.Run("UserToGroups", testUserToManyGroups)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("GroupToUsers", testGroupToManyAddOpUsers)
	t.Run("UserToGroups", testUserToManyAddOpGroups)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("GroupToUsers", testGroupToManySetOpUsers)
	t.Run("UserToGroups", testUserToManySetOpGroups)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("GroupToUsers", testGroupToManyRemoveOpUsers)
	t.Run("UserToGroups", testUserToManyRemoveOpGroups)
}

func TestReload(t *testing.T) {
	t.Run("Groups", testGroupsReload)
	t.Run("TestTables", testTestTablesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Groups", testGroupsReloadAll)
	t.Run("TestTables", testTestTablesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Groups", testGroupsSelect)
	t.Run("TestTables", testTestTablesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Groups", testGroupsUpdate)
	t.Run("TestTables", testTestTablesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Groups", testGroupsSliceUpdateAll)
	t.Run("TestTables", testTestTablesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
